# -*- coding: utf-8 -*-
"""Semester

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c5c5VK-K_IJd7loeAQJHIbQj38JcYSJO
"""

#import libraries
import streamlit as st
import pandas as pd
import requests
import json

#change those IDs to readable names
series_ids = ['LNS11000000', 'LNS13000000', 'LNS14000000', 'CES0000000001']
series_names = {
    "LNS11000000": "Civilian Labor Force",
    "LNS13000000": "Civilian Unemployment",
    "LNS14000000": "Unemployment Rate",
    "CES0000000001": "Total Nonfarm Employment"
}

#API headers
headers = {'Content-type': 'application/json'}
payload = json.dumps({
    "seriesid": series_ids,
    "startyear": "2014",
    "endyear": "2024"
})

#grab and process data
@st.cache_data(ttl="1d")
def collect_and_process_data():
    response = requests.post(
        'https://api.bls.gov/publicAPI/v2/timeseries/data/',
        headers=headers,
        data=payload
    )
    json_data = json.loads(response.text)

    dataframes_dict = {}
    for series in json_data['Results']['series']:
        series_id = series['seriesID']
        parsed_data = []

        for item in series['data']:
            year = item['year']
            period = item['period']
            value = float(item['value'])
            month = period.replace('M', '')
            parsed_data.append({
                'Year': year,
                'Month': month,
                'Value': value,
                'Date': pd.to_datetime(f"{year}-{month}", format='%Y-%m', errors='coerce')
            })

        df = pd.DataFrame(parsed_data)
        dataframes_dict[series_id] = df.sort_values(by='Date')

    return dataframes_dict

dataframes_dict = collect_and_process_data()

#streamlit App
st.title("BLS Data Overview")
st.write("Displaying key labor statistics retrieved from the BLS API.")

#display raw data for each series
st.markdown("## Raw Data Tables")
for series_id, df in dataframes_dict.items():
    st.subheader(series_names[series_id])
    st.dataframe(df)  # Show data as table

#download CSV buttons
st.markdown("## Download Data as CSV")
for series_id, df in dataframes_dict.items():
    st.download_button(
        label=f"Download {series_names[series_id]} Data",
        data=df.to_csv(index=False),
        file_name=f"{series_names[series_id]}.csv",
        mime="text/csv"
    )